/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace EcoLedger {
  export type ProductStruct = {
    productId: string;
    name: string;
    category: string;
    co2Footprint: BigNumberish;
    company: AddressLike;
    timestamp: BigNumberish;
    txHash: string;
    exists: boolean;
  };

  export type ProductStructOutput = [
    productId: string,
    name: string,
    category: string,
    co2Footprint: bigint,
    company: string,
    timestamp: bigint,
    txHash: string,
    exists: boolean
  ] & {
    productId: string;
    name: string;
    category: string;
    co2Footprint: bigint;
    company: string;
    timestamp: bigint;
    txHash: string;
    exists: boolean;
  };
}

export interface EcoLedgerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllProducts"
      | "getGlobalStats"
      | "getProduct"
      | "getTotalCo2Footprint"
      | "getTotalProducts"
      | "getWalletProducts"
      | "getWalletStats"
      | "isProductExists"
      | "owner"
      | "productIds"
      | "products"
      | "registerProduct"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateProductCo2"
      | "updateProductTxHash"
      | "walletProducts"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProductRegistered"
      | "ProductUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAllProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalStats",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getProduct", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalCo2Footprint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletProducts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isProductExists",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "productIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "products", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerProduct",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProductCo2",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProductTxHash",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "walletProducts",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCo2Footprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProductExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "productIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProductCo2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProductTxHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletProducts",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductRegisteredEvent {
  export type InputTuple = [
    productId: string,
    name: string,
    category: string,
    co2Footprint: BigNumberish,
    company: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    productId: string,
    name: string,
    category: string,
    co2Footprint: bigint,
    company: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    productId: string;
    name: string;
    category: string;
    co2Footprint: bigint;
    company: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductUpdatedEvent {
  export type InputTuple = [
    productId: string,
    name: string,
    newCo2Footprint: BigNumberish,
    company: AddressLike
  ];
  export type OutputTuple = [
    productId: string,
    name: string,
    newCo2Footprint: bigint,
    company: string
  ];
  export interface OutputObject {
    productId: string;
    name: string;
    newCo2Footprint: bigint;
    company: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EcoLedger extends BaseContract {
  connect(runner?: ContractRunner | null): EcoLedger;
  waitForDeployment(): Promise<this>;

  interface: EcoLedgerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllProducts: TypedContractMethod<
    [],
    [EcoLedger.ProductStructOutput[]],
    "view"
  >;

  getGlobalStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalWallets: bigint;
        totalProducts: bigint;
        totalCo2Footprint: bigint;
      }
    ],
    "view"
  >;

  getProduct: TypedContractMethod<
    [_productId: string],
    [EcoLedger.ProductStructOutput],
    "view"
  >;

  getTotalCo2Footprint: TypedContractMethod<[], [bigint], "view">;

  getTotalProducts: TypedContractMethod<[], [bigint], "view">;

  getWalletProducts: TypedContractMethod<
    [_wallet: AddressLike],
    [EcoLedger.ProductStructOutput[]],
    "view"
  >;

  getWalletStats: TypedContractMethod<
    [_wallet: AddressLike],
    [
      [bigint, bigint, bigint] & {
        totalProducts: bigint;
        totalCo2Footprint: bigint;
        averageCo2PerProduct: bigint;
      }
    ],
    "view"
  >;

  isProductExists: TypedContractMethod<[_productId: string], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  productIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  products: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, string, bigint, string, boolean] & {
        productId: string;
        name: string;
        category: string;
        co2Footprint: bigint;
        company: string;
        timestamp: bigint;
        txHash: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  registerProduct: TypedContractMethod<
    [
      _productId: string,
      _name: string,
      _category: string,
      _co2Footprint: BigNumberish,
      _txHash: string
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateProductCo2: TypedContractMethod<
    [_productId: string, _newCo2Footprint: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateProductTxHash: TypedContractMethod<
    [_productId: string, _txHash: string],
    [void],
    "nonpayable"
  >;

  walletProducts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllProducts"
  ): TypedContractMethod<[], [EcoLedger.ProductStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getGlobalStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalWallets: bigint;
        totalProducts: bigint;
        totalCo2Footprint: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProduct"
  ): TypedContractMethod<
    [_productId: string],
    [EcoLedger.ProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalCo2Footprint"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalProducts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWalletProducts"
  ): TypedContractMethod<
    [_wallet: AddressLike],
    [EcoLedger.ProductStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWalletStats"
  ): TypedContractMethod<
    [_wallet: AddressLike],
    [
      [bigint, bigint, bigint] & {
        totalProducts: bigint;
        totalCo2Footprint: bigint;
        averageCo2PerProduct: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isProductExists"
  ): TypedContractMethod<[_productId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "productIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, string, bigint, string, boolean] & {
        productId: string;
        name: string;
        category: string;
        co2Footprint: bigint;
        company: string;
        timestamp: bigint;
        txHash: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerProduct"
  ): TypedContractMethod<
    [
      _productId: string,
      _name: string,
      _category: string,
      _co2Footprint: BigNumberish,
      _txHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProductCo2"
  ): TypedContractMethod<
    [_productId: string, _newCo2Footprint: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProductTxHash"
  ): TypedContractMethod<
    [_productId: string, _txHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "walletProducts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProductRegistered"
  ): TypedContractEvent<
    ProductRegisteredEvent.InputTuple,
    ProductRegisteredEvent.OutputTuple,
    ProductRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ProductUpdated"
  ): TypedContractEvent<
    ProductUpdatedEvent.InputTuple,
    ProductUpdatedEvent.OutputTuple,
    ProductUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProductRegistered(string,string,string,uint256,address,uint256)": TypedContractEvent<
      ProductRegisteredEvent.InputTuple,
      ProductRegisteredEvent.OutputTuple,
      ProductRegisteredEvent.OutputObject
    >;
    ProductRegistered: TypedContractEvent<
      ProductRegisteredEvent.InputTuple,
      ProductRegisteredEvent.OutputTuple,
      ProductRegisteredEvent.OutputObject
    >;

    "ProductUpdated(string,string,uint256,address)": TypedContractEvent<
      ProductUpdatedEvent.InputTuple,
      ProductUpdatedEvent.OutputTuple,
      ProductUpdatedEvent.OutputObject
    >;
    ProductUpdated: TypedContractEvent<
      ProductUpdatedEvent.InputTuple,
      ProductUpdatedEvent.OutputTuple,
      ProductUpdatedEvent.OutputObject
    >;
  };
}
